FORMAT: 1A
HOST: http://api.theNoisyCity.com/

# The Noisy City

Close your eyes and listen to the noisy city.

## Enums

Enums in this project use `Int` as its base class, while generally won't use `0` or any number below 0`.

#### Channel

User can determine which channel to listen. Current avaliable channels are:

+ `1` **TA声与TA生  Voices from Him/her** very close, recent
+ `2` **繁华与喧闹  Voices from Around** close, very recent, random
+ `3` **他乡与故知  Voices from Hometown** far, recent
+ `4` **新街与旧闻  Voices from Localfolks** Folks from where you are, while far away from home
+ `5` **过往与当下  Voices from Past** same day in last year

#### Language

Sould we make Cantonese a language instead of a dialect?

+ `1` **Madarin**
+ `2` **Cantonese** Just a placeholder
+ `3` **English** Not available now

#### MessageType

+ `1` **Text**
+ `2` **Vioce**
+ `3` **Picture**
+ `4` **Video**

#### TagType

+ `1` **Custom**

#### Report Reason

+ `1` **Rude**
+ `2` **Pornographic**
+ `3` **Meaningless**

## Database Tables

#### User

```sql
CREATE TABLE IF NOT EXISTS `user` (
    `uid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `username` VARCHAR(64) NOT NULL COMMENT 'nickname can be edited, but not within a short period',
    `password` VARCHAR(128) NOT NULL COMMENT 'encrypted password, maybe with bcrypt',
    `email` VARCHAR(64),
    `email_confirmed` BOOL NOT NULL,
    `phone` VARCHAR(16),
    `phone_confirmed` BOOL NOT NULL,
    `bio` VARCHAR(512) COMMENT 'simple discription for self',
    `avatar_path` VARCHAR(64) COMMENT 'maybe lead this to aliyun's oss',
    `create_time` TIMESTAMP NOT NULL,
    `last_time_username_changed` TIMESTAMP NOT NULL,
    `language_first` TINYINT NOT NULL COMMENT 'mother tongue, see Language under Enums',
    `language_second` TINYINT NOT NULL,
    `dialect_first` POINT COMMENT 'GCJ-02 for Chinese server, WCG-84 for overseas',
    `dialect_second` POINT NOT,
    PRIMARY KEY (`uid`)
)
```

#### Tag

User can tag themselves. 

CREATE TABLE IF NOT EXISTS `tag` (
    `uid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `tag_type` TINYINT NOT NULL COMMENT 'see TagType in Enums',
    `value` VARCHAR(256) NOT NULL
)

#### Medal

Like achievements in Steam. We may need a schema file too generate description in the backend project.

CREATE TABLE IF NOT EXISTS `medal` (
    `uid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `title` VARCHAR(32) NOT NULL,
    `award_time` TIMESTAMP NOT NULL,
    `description` VARCHAR(256) NOT NULL
)


#### Record

CREATE TABLE IF NOT EXISTS `record` (
    `rid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `create_user` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `create_time` TIMESTAMP NOT NULL,
    `description` VARCHAR(2048) NOT NULL,
    `duration` SMALLINT UNSIGNED NOT NULL COMMENT 'unit: second',
    `upload_position` POINT NOT NULL,
    `language` TINYINT NOT NULL COMMENT 'see Language under Enums',
    `dialect` POINT,
    `file_path` VARCHAR(64),
    PRIMARY KEY (`rid`)
)

#### Comment

CREATE TABLE IF NOT EXISTS `comment` (
    `cid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 8-digit rid hash, 10-digit timestamp',
    `rid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `commenter_user` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `reply_to_user` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `reply to comment` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 8-digit rid hash, 10-digit timestamp',
    `create_time` TIMESTAMP NOT NULL,
    PRIMARY KEY (`cid`)
)

#### Like

CREATE TABLE IF NOT EXISTS `like` (
    `rid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `uid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `create_time` TIMESTAMP NOT NULL
)

#### Message

CREATE TABLE IF NOT EXISTS `message` (
    `sender_id` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `receiver_id` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `create_time` TIMESTAMP NOT NULL,
    `is read` BOOL NOT NULL,
    `type` TINYINT NOT NULL COMMENT 'see Message type in Enums',
    `content` VARCHAR(2048) COMMENT 'text message',
    `file_path` VARCHAR(64)
)

#### Hark

Not core function, just count how long one person have listened on another person

CREATE TABLE IF NOT EXISTS `hark` (
    `listener_id` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `listenee_id` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `rid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `duration` INT NOT NULL COMMENT 'unit: second'
)


#### Report


CREATE TABLE IF NOT EXISTS `report` (
    `rid` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `reporter` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `reportee` BIGINT UNSIGNED NOT NULL COMMENT '2-digit server number(00-18), 4-digit longitude, 4-digit latitude, 10-digit timestamp',
    `report_time` TIMESTAMP NOT NULL,
    `reason` VARCHAR(64)
)


## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }